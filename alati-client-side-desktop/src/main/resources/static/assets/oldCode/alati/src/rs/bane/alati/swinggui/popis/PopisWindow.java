/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rs.bane.alati.swinggui.popis;

import java.awt.Rectangle;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashSet;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import rs.bane.alati.swinggui.meni.Prozori;
import rs.bane.alati.model.popis.Stavka;
import rs.bane.alati.model.popis.StavkaSqlIO;
import rs.bane.alati.dao.ExportPopisXLS;
import rs.bane.alati.model.sastavnice.Sastavnica;

/**
 *
 * @author bunjac
 */
public class PopisWindow extends javax.swing.JFrame {

    String[] sveLokacije = new String[]{"Magacin gotove robe", "Magacin sirovine",
        "Magacin polufabrikata", "Magacin Mesinga", "Pogon - mašinsko", "Pogon - montaža"};
    String[] sveLokacijePregled;
    private Connection ucinakConnection;
    private Connection connection;
    Stavka stavka;
    boolean update = false;
    int prevGodina;
    String prevLokacija;
    String prevIdent;
    String prevPoslednjaOp;
    boolean prevDorada;
    ArrayList<Stavka> stavke = new ArrayList();

    public PopisWindow(Connection ucinakConnection, Connection connection) {
        initLokacije();
        initComponents();
        int year = Calendar.getInstance().get(Calendar.YEAR);
        godinaSP.setModel(new javax.swing.SpinnerNumberModel(year - 1, 2017, 3000, 1));
        godinaSPPrikaz.setModel(new javax.swing.SpinnerNumberModel(year - 1, 2017, 3000, 1));
        this.ucinakConnection = ucinakConnection;
        this.connection = connection;
        tabela.getColumnModel().getColumn(0).setPreferredWidth(90);
        tabela.getColumnModel().getColumn(1).setPreferredWidth(180);
        tabela.getColumnModel().getColumn(2).setPreferredWidth(180);
        tabela.getColumnModel().getColumn(3).setPreferredWidth(50);
        tabela.getColumnModel().getColumn(4).setPreferredWidth(200);
        tabela.getColumnModel().getColumn(5).setPreferredWidth(100);
        tabela.getColumnModel().getColumn(6).setPreferredWidth(90);
        tabela.getColumnModel().getColumn(7).setPreferredWidth(90);
        tabela.getColumnModel().getColumn(8).setPreferredWidth(180);
        tabela.getColumnModel().getColumn(9).setPreferredWidth(180);
        popuniTabelu();
    }

    private void initLokacije() {
        sveLokacijePregled = new String[sveLokacije.length + 1];
        sveLokacijePregled[0] = "Sve lokacije";
        for (int i = 0; i < sveLokacije.length; i++) {
            sveLokacijePregled[i + 1] = sveLokacije[i];
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabela = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        identTB = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        ucitajArtikalBT = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        katBrojTB = new javax.swing.JTextField();
        nazivTB = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jmTB = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        operacijaCB = new javax.swing.JComboBox<>();
        lokacijaCB = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        sacuvajBT = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        lokacijaCBPrikaz = new javax.swing.JComboBox<>();
        godinaSPPrikaz = new javax.swing.JSpinner();
        osveziBT = new javax.swing.JButton();
        updateBT = new javax.swing.JButton();
        deleteBT = new javax.swing.JButton();
        kolicinaTB = new javax.swing.JFormattedTextField();
        godinaSP = new javax.swing.JSpinner();
        jLabel10 = new javax.swing.JLabel();
        otkaziBT = new javax.swing.JButton();
        noviBT = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        totalVredTB = new javax.swing.JFormattedTextField();
        exportBT = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        doradaCB = new javax.swing.JCheckBox();
        exportBT1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        unosMI = new javax.swing.JMenuItem();
        pregledMI = new javax.swing.JMenuItem();
        pracenjeMI = new javax.swing.JMenuItem();
        normativiMI = new javax.swing.JMenuItem();
        tehnologijeMI = new javax.swing.JMenuItem();
        popisMI = new javax.swing.JMenuItem();
        sistemiMI = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Popis");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        tabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "IDENT", "KATALOŠKI BROJ", "NAZIV ARTIKLA", "J.M.", "POSLEDNJA OPERACIJA", "ZA DORADU", "KOLIÈINA", "CENA KOM", "VREDNOST", "LOKACIJA"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabela.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tabela.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tabela.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaMouseClicked(evt);
            }
        });
        tabela.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tabelaKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tabela);

        jLabel1.setText("Popis za godinu");

        jLabel2.setText("Prikaz lokacije");

        identTB.setEditable(false);
        identTB.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel3.setText("Ident");

        ucitajArtikalBT.setText("...");
        ucitajArtikalBT.setEnabled(false);
        ucitajArtikalBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ucitajArtikalBTActionPerformed(evt);
            }
        });

        jLabel4.setText("Kataloški broj");

        katBrojTB.setEditable(false);
        katBrojTB.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        nazivTB.setEditable(false);
        nazivTB.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel5.setText("Naziv artikla");

        jLabel6.setText("J.M.");

        jmTB.setEditable(false);
        jmTB.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel7.setText("Operacija");

        jLabel8.setText("Kolièina");

        operacijaCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nepoznata operacija" }));
        operacijaCB.setEnabled(false);

        lokacijaCB.setModel(new javax.swing.DefaultComboBoxModel<>(sveLokacije));
        lokacijaCB.setEnabled(false);

        jLabel9.setText("Lokacija");

        sacuvajBT.setBackground(new java.awt.Color(51, 102, 0));
        sacuvajBT.setText("SAÈUVAJ");
        sacuvajBT.setEnabled(false);
        sacuvajBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sacuvajBTActionPerformed(evt);
            }
        });

        lokacijaCBPrikaz.setModel(new javax.swing.DefaultComboBoxModel<>(sveLokacijePregled));
        lokacijaCBPrikaz.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                lokacijaCBPrikazItemStateChanged(evt);
            }
        });

        godinaSPPrikaz.setModel(new javax.swing.SpinnerNumberModel(2018, 2017, 3000, 1));
        godinaSPPrikaz.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                godinaSPPrikazStateChanged(evt);
            }
        });

        osveziBT.setText("PRIKAŽI ZADATU GODINU");
        osveziBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                osveziBTActionPerformed(evt);
            }
        });

        updateBT.setBackground(new java.awt.Color(255, 255, 102));
        updateBT.setText("IZMENI");
        updateBT.setEnabled(false);
        updateBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBTActionPerformed(evt);
            }
        });

        deleteBT.setBackground(new java.awt.Color(255, 51, 51));
        deleteBT.setText("OBRIŠI");
        deleteBT.setEnabled(false);
        deleteBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBTActionPerformed(evt);
            }
        });

        kolicinaTB.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        kolicinaTB.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        kolicinaTB.setEnabled(false);
        kolicinaTB.setValue(0.00);

        godinaSP.setModel(new javax.swing.SpinnerNumberModel(2018, 2017, 3000, 1));
        godinaSP.setEnabled(false);

        jLabel10.setText("Godina");

        otkaziBT.setText("OTKAŽI");
        otkaziBT.setEnabled(false);
        otkaziBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                otkaziBTActionPerformed(evt);
            }
        });

        noviBT.setBackground(new java.awt.Color(51, 102, 0));
        noviBT.setText("NOVI");
        noviBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noviBTActionPerformed(evt);
            }
        });

        jLabel11.setText("Vrednost prikazanih");

        totalVredTB.setEditable(false);
        totalVredTB.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        totalVredTB.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        totalVredTB.setValue(0.00);

        exportBT.setText("EXPORT");
        exportBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportBTActionPerformed(evt);
            }
        });

        jLabel12.setText("0,00");

        doradaCB.setText("Dorada");
        doradaCB.setEnabled(false);

        exportBT1.setText("EXPORT BEZ RADA");
        exportBT1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportBT1ActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        unosMI.setText("Unos ucinaka");
        unosMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unosMIActionPerformed(evt);
            }
        });
        jMenu1.add(unosMI);

        pregledMI.setText("Pregled ucinaka");
        pregledMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pregledMIActionPerformed(evt);
            }
        });
        jMenu1.add(pregledMI);

        pracenjeMI.setText("Pracenje proizvodnje");
        pracenjeMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pracenjeMIActionPerformed(evt);
            }
        });
        jMenu1.add(pracenjeMI);

        normativiMI.setText("Normativi za izvoz");
        normativiMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normativiMIActionPerformed(evt);
            }
        });
        jMenu1.add(normativiMI);

        tehnologijeMI.setText("Tehnologije");
        tehnologijeMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tehnologijeMIActionPerformed(evt);
            }
        });
        jMenu1.add(tehnologijeMI);

        popisMI.setText("Popis");
        popisMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popisMIActionPerformed(evt);
            }
        });
        jMenu1.add(popisMI);

        sistemiMI.setText("Sistemi");
        sistemiMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sistemiMIActionPerformed(evt);
            }
        });
        jMenu1.add(sistemiMI);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lokacijaCBPrikaz, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(osveziBT)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(godinaSPPrikaz, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(deleteBT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(updateBT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(noviBT)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(exportBT)
                            .addComponent(exportBT1))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(totalVredTB, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(108, 108, 108)
                                        .addComponent(jLabel4))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(identTB, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(ucitajArtikalBT, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(katBrojTB, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addGap(18, 18, 18)
                                        .addComponent(lokacijaCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel10)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(godinaSP, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(operacijaCB, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel5)
                                            .addComponent(nazivTB, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jmTB, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel6))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel8)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(kolicinaTB, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel12)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(doradaCB)))))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(sacuvajBT)
                                    .addComponent(otkaziBT, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 47, Short.MAX_VALUE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(identTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ucitajArtikalBT)
                            .addComponent(katBrojTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nazivTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jmTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(kolicinaTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(otkaziBT)
                            .addComponent(jLabel12)
                            .addComponent(doradaCB))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sacuvajBT)
                            .addComponent(operacijaCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel9)
                            .addComponent(lokacijaCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(godinaSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(lokacijaCBPrikaz, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(godinaSPPrikaz, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateBT)
                            .addComponent(exportBT1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(osveziBT)
                            .addComponent(deleteBT)
                            .addComponent(noviBT)
                            .addComponent(exportBT)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(totalVredTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        Prozori.pracenje = null;
    }//GEN-LAST:event_formWindowClosing

    private void unosMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unosMIActionPerformed
        Prozori.openUnos();
    }//GEN-LAST:event_unosMIActionPerformed

    private void pregledMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pregledMIActionPerformed
        Prozori.openPregled();
    }//GEN-LAST:event_pregledMIActionPerformed

    private void pracenjeMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pracenjeMIActionPerformed
        Prozori.openPracenje();
    }//GEN-LAST:event_pracenjeMIActionPerformed

    private void normativiMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_normativiMIActionPerformed
        Prozori.openNormativi();
    }//GEN-LAST:event_normativiMIActionPerformed

    private void tehnologijeMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tehnologijeMIActionPerformed
        Prozori.openTehnologije();
    }//GEN-LAST:event_tehnologijeMIActionPerformed

    private void popisMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popisMIActionPerformed
        Prozori.openPopis();
    }//GEN-LAST:event_popisMIActionPerformed

    private void ucitajArtikalBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ucitajArtikalBTActionPerformed
        UpitArtiklaD upitArtikla = new UpitArtiklaD(this, false, connection);
        stavka = upitArtikla.stavka;
        if (stavka != null) {
            identTB.setText(stavka.ident);
            katBrojTB.setText(stavka.katBroj);
            nazivTB.setText(stavka.naziv);
            jmTB.setText(stavka.jm);
            //ucitaj operacije
            ArrayList<String> operacije = StavkaSqlIO.getOperacije(stavka.ident, connection);
            DefaultComboBoxModel model = (DefaultComboBoxModel) operacijaCB.getModel();
            model.removeAllElements();
            model.addElement("Nepoznata operacija");
            for (String w : operacije) {
                model.addElement(w);
            }
        } else {
            //isprazni polja
        }
    }//GEN-LAST:event_ucitajArtikalBTActionPerformed

    private void sacuvajBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sacuvajBTActionPerformed
        if (stavka != null) {
            try {
                stavka.poslednjaOp = operacijaCB.getModel().getElementAt(operacijaCB.getSelectedIndex());
                try {
                    stavka.kolicina = (double) kolicinaTB.getValue();
                } catch (ClassCastException cce) {
                    stavka.kolicina = 0.0 + (long) kolicinaTB.getValue();
                }
                stavka.godina = (int) godinaSP.getValue();
                stavka.lokacija = lokacijaCB.getModel().getElementAt(lokacijaCB.getSelectedIndex());
                stavka.dorada = doradaCB.isSelected();
                if (!update) {//nije update nego je upsert
                    if (StavkaSqlIO.updateInDB(true, stavka.godina, stavka.lokacija, stavka.ident, stavka.poslednjaOp,
                            stavka.dorada, stavka, ucinakConnection)) {
                        JOptionPane.showMessageDialog(this, "Saèuvano!");
                    } else {
                        JOptionPane.showMessageDialog(this, "Nije saèuvano!");
                    }
                } else {// jeste update, nije upsert
                    if (StavkaSqlIO.updateInDB(false, prevGodina, prevLokacija, prevIdent, prevPoslednjaOp,
                            prevDorada, stavka, ucinakConnection)) {
                        JOptionPane.showMessageDialog(this, "Saèuvano!");
                    } else {
                        JOptionPane.showMessageDialog(this, "Nije saèuvano!");
                    }
                }
                //popuniTabelu();
                prazniPolja();
                paliDugmad(false);

                if (lokacijaCBPrikaz.getSelectedIndex() == (lokacijaCB.getSelectedIndex() + 1)) {
                    popuniTabelu();
                } else {
                    lokacijaCBPrikaz.setSelectedIndex(lokacijaCB.getSelectedIndex() + 1);
                }
                int x = findIndex();
                if (x > -1) {
                    tabela.setRowSelectionInterval(x, x);
                    Rectangle aRect = tabela.getCellRect(x, 0, true);
                    tabela.scrollRectToVisible(aRect);
                }
            } catch (NumberFormatException nfe) {
                System.out.println("nfe");
            }
        }
    }//GEN-LAST:event_sacuvajBTActionPerformed

    private void osveziBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_osveziBTActionPerformed
        popuniTabelu();
    }//GEN-LAST:event_osveziBTActionPerformed

    private void deleteBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBTActionPerformed
        int n = tabela.getSelectedRow();
        if (n > -1) {
            if (JOptionPane.showConfirmDialog(null, "Sigurno obriši?", "WARNING",
                    JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                Stavka forDelete = stavke.get(n);
                if (StavkaSqlIO.deleteInDB(forDelete.godina, forDelete.lokacija, forDelete.ident, forDelete.poslednjaOp,
                        forDelete.dorada, ucinakConnection)) {
                    JOptionPane.showMessageDialog(this, "Stavka obrisana!");
                    prazniPolja();
                } else {
                    JOptionPane.showMessageDialog(this, "Nije obrisana!");
                }
            } else {
                //no option
            }
        } else {
            JOptionPane.showMessageDialog(this, "Odaberite stavku iz tabele");
        }
        popuniTabelu();
    }//GEN-LAST:event_deleteBTActionPerformed

    private void updateBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBTActionPerformed
        int n = tabela.getSelectedRow();
        if (n > -1) {
            update = true;
            stavka = stavke.get(n);
            System.out.println(stavka);
            prevGodina = stavka.godina;
            prevLokacija = stavka.lokacija;
            prevIdent = stavka.ident;
            prevPoslednjaOp = stavka.poslednjaOp;
            prevDorada = stavka.dorada;
            popuniPolja(stavka);
            paliDugmad(true);
        } else {
            JOptionPane.showMessageDialog(this, "Odaberite stavku iz tabele");
        }
    }//GEN-LAST:event_updateBTActionPerformed

    private void otkaziBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_otkaziBTActionPerformed
        prazniPolja();
        paliDugmad(false);
    }//GEN-LAST:event_otkaziBTActionPerformed

    private void noviBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noviBTActionPerformed
        paliDugmad(true);
        prazniPolja();
        stavka = null;
        update = false;
    }//GEN-LAST:event_noviBTActionPerformed

    private void tabelaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaMouseClicked
        if (lokacijaCBPrikaz.getSelectedIndex() != 0) {
            if (evt.getButton() == 1) {
                int n = tabela.getSelectedRow();
                if (n > -1) {
                    //System.out.println(stavke.get(n));
                    stavka = stavke.get(n);
                    popuniPolja(stavka);
                }
            }
        }
    }//GEN-LAST:event_tabelaMouseClicked

    private void tabelaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tabelaKeyReleased
        if (lokacijaCBPrikaz.getSelectedIndex() != 0) {
            if (evt.getKeyCode() == KeyEvent.VK_DOWN || evt.getKeyCode() == KeyEvent.VK_UP) {
                int n = tabela.getSelectedRow();
                if (n > -1) {
                    //System.out.println(stavke.get(n));
                    stavka = stavke.get(n);
                    popuniPolja(stavka);
                }
            }
        }
    }//GEN-LAST:event_tabelaKeyReleased

    private void lokacijaCBPrikazItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_lokacijaCBPrikazItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            popuniTabelu();
            String lokacija = lokacijaCBPrikaz.getModel().getElementAt(lokacijaCBPrikaz.getSelectedIndex());
            boolean bool = true;
            if (lokacija.equalsIgnoreCase("sve lokacije")) {
                bool = false;
            }
            updateBT.setEnabled(bool);
            deleteBT.setEnabled(bool);
        }
    }//GEN-LAST:event_lokacijaCBPrikazItemStateChanged

    private void exportBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportBTActionPerformed
        Sastavnica.resetSirovineBezCene();
        ArrayList<ArrayList<Stavka>> liste = new ArrayList();
        int godina = (int) godinaSPPrikaz.getValue();
        DefaultComboBoxModel model = (DefaultComboBoxModel) lokacijaCBPrikaz.getModel();
        for (int i = 0; i < model.getSize(); i++) {
            String lokacija = (String) model.getElementAt(i);
            liste.add(StavkaSqlIO.getListGodinaLokacija(false, godina, lokacija, ucinakConnection, connection));
        }
        String ime = "Popis " + godina;
        File targetFile = Prozori.fileSaver(ime + ".xls");
        if (targetFile != null && ExportPopisXLS.exportPopis(liste, ime, targetFile)) {
            JOptionPane.showMessageDialog(this, "Uspesno exportovan!");
        } else {
            JOptionPane.showMessageDialog(this, "NIJE exportovan!");
        }
    }//GEN-LAST:event_exportBTActionPerformed

    private void godinaSPPrikazStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_godinaSPPrikazStateChanged
        popuniTabelu();
    }//GEN-LAST:event_godinaSPPrikazStateChanged

    private void sistemiMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sistemiMIActionPerformed
        Prozori.openSistemi();
    }//GEN-LAST:event_sistemiMIActionPerformed

    private void exportBT1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportBT1ActionPerformed
        Sastavnica.resetSirovineBezCene();
        ArrayList<ArrayList<Stavka>> liste = new ArrayList();
        int godina = (int) godinaSPPrikaz.getValue();
        DefaultComboBoxModel model = (DefaultComboBoxModel) lokacijaCBPrikaz.getModel();
        for (int i = 0; i < model.getSize(); i++) {
            String lokacija = (String) model.getElementAt(i);
            liste.add(StavkaSqlIO.getListGodinaLokacija(true, godina, lokacija, ucinakConnection, connection));
        }
        String ime = "Popis " + godina;
        File targetFile = Prozori.fileSaver(ime + " samo materijal.xls");
        if (targetFile != null && ExportPopisXLS.exportPopis(liste, ime, targetFile)) {
            JOptionPane.showMessageDialog(this, "Uspesno exportovan!");
        } else {
            JOptionPane.showMessageDialog(this, "NIJE exportovan!");
        }
    }//GEN-LAST:event_exportBT1ActionPerformed

    private int findIndex() {
        int n = -1;
        DefaultTableModel model = (DefaultTableModel) tabela.getModel();
        if (model.getRowCount() > 0) {
            for (int i = model.getRowCount() - 1; i > -1; i--) {
                if (((String) model.getValueAt(i, 0)).equalsIgnoreCase(stavka.ident)
                        && ((String) model.getValueAt(i, 4)).equalsIgnoreCase(stavka.poslednjaOp)
                        && ((String) model.getValueAt(i, 9)).equalsIgnoreCase(stavka.lokacija)
                        && ((int) godinaSPPrikaz.getValue() == stavka.godina)
                        && ((String) model.getValueAt(i, 5)).equalsIgnoreCase(stavka.dorada ? "da" : "ne")) {
                    return i;
                }
            }
        }
        return n;
    }

    private void popuniTabelu() {
        int godina = (int) godinaSPPrikaz.getValue();
        String lokacija = lokacijaCBPrikaz.getModel().getElementAt(lokacijaCBPrikaz.getSelectedIndex());
        stavke = StavkaSqlIO.getListGodinaLokacija(false, godina, lokacija, ucinakConnection, connection);
        DefaultTableModel model = (DefaultTableModel) tabela.getModel();
        if (model.getRowCount() > 0) {
            for (int i = model.getRowCount() - 1; i > -1; i--) {
                model.removeRow(i);
            }
        }
        Sastavnica.setSirovineBezCene(new HashSet());
        double total = 0;
        if (stavke != null) {
            for (Stavka s : stavke) {
                double cena = s.cena;//s.getCena(s.poslednjaOp, connection);
                double vrednost = cena * s.kolicina;
                total += vrednost;
                model.addRow(new Object[]{s.ident, s.katBroj, s.naziv, s.jm, s.poslednjaOp, (s.dorada ? "da" : "ne"),
                    s.kolicina, cena, vrednost, s.lokacija});
            }
        }
        totalVredTB.setValue(total);
    }

    private void prazniPolja() {
        identTB.setText("");
        katBrojTB.setText("");
        nazivTB.setText("");
        jmTB.setText("");
        kolicinaTB.setValue(0.);
        doradaCB.setSelected(false);
        DefaultComboBoxModel model = (DefaultComboBoxModel) operacijaCB.getModel();
        model.removeAllElements();
        model.addElement("Nepoznata operacija");
    }

    private void popuniPolja(Stavka s) {
        identTB.setText(s.ident);
        katBrojTB.setText(s.katBroj);
        nazivTB.setText(s.naziv);
        jmTB.setText(s.jm);
        kolicinaTB.setValue(s.kolicina);
        doradaCB.setSelected(s.dorada);
        DefaultComboBoxModel model = (DefaultComboBoxModel) operacijaCB.getModel();
        model.removeAllElements();
        model.addElement("Nepoznata operacija");
        ArrayList<String> operacije = StavkaSqlIO.getOperacije(s.ident, connection);
        int i = 0;
        for (String w : operacije) {
            model.addElement(w);
            i++;
            if (w.equalsIgnoreCase(s.poslednjaOp)) {
                operacijaCB.setSelectedIndex(i);
            }
        }
        DefaultComboBoxModel model2 = (DefaultComboBoxModel) lokacijaCB.getModel();
        lokacijaCB.setSelectedItem(s.lokacija);
    }

    private void paliDugmad(boolean gornja) {
        sacuvajBT.setEnabled(gornja);
        otkaziBT.setEnabled(gornja);
        ucitajArtikalBT.setEnabled(gornja);
        kolicinaTB.setEnabled(gornja);
        lokacijaCB.setEnabled(gornja);
        godinaSP.setEnabled(gornja);
        operacijaCB.setEnabled(gornja);
        doradaCB.setEnabled(gornja);
        //
        if (!gornja && lokacijaCBPrikaz.getSelectedIndex() == 0) {
            updateBT.setEnabled(false);
            deleteBT.setEnabled(false);
        } else {
            updateBT.setEnabled(!gornja);
            deleteBT.setEnabled(!gornja);
        }
        noviBT.setEnabled(!gornja);
        lokacijaCBPrikaz.setEnabled(!gornja);
        godinaSPPrikaz.setEnabled(!gornja);
        osveziBT.setEnabled(!gornja);
    }

    /**
     *
     */
    public static PopisWindow createAndOpen(Connection ucinakConnection, Connection connection) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PopisWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PopisWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PopisWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PopisWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        PopisWindow pWind = new PopisWindow(ucinakConnection, connection);
        pWind.setLocationRelativeTo(null);
        //pWind.setExtendedState(MAXIMIZED_BOTH);
        pWind.setVisible(true);
        return pWind;

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteBT;
    private javax.swing.JCheckBox doradaCB;
    private javax.swing.JButton exportBT;
    private javax.swing.JButton exportBT1;
    private javax.swing.JSpinner godinaSP;
    private javax.swing.JSpinner godinaSPPrikaz;
    private javax.swing.JTextField identTB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jmTB;
    private javax.swing.JTextField katBrojTB;
    private javax.swing.JFormattedTextField kolicinaTB;
    private javax.swing.JComboBox<String> lokacijaCB;
    private javax.swing.JComboBox<String> lokacijaCBPrikaz;
    private javax.swing.JTextField nazivTB;
    private javax.swing.JMenuItem normativiMI;
    private javax.swing.JButton noviBT;
    private javax.swing.JComboBox<String> operacijaCB;
    private javax.swing.JButton osveziBT;
    private javax.swing.JButton otkaziBT;
    private javax.swing.JMenuItem popisMI;
    private javax.swing.JMenuItem pracenjeMI;
    private javax.swing.JMenuItem pregledMI;
    private javax.swing.JButton sacuvajBT;
    private javax.swing.JMenuItem sistemiMI;
    private javax.swing.JTable tabela;
    private javax.swing.JMenuItem tehnologijeMI;
    private javax.swing.JFormattedTextField totalVredTB;
    private javax.swing.JButton ucitajArtikalBT;
    private javax.swing.JMenuItem unosMI;
    private javax.swing.JButton updateBT;
    // End of variables declaration//GEN-END:variables
}
